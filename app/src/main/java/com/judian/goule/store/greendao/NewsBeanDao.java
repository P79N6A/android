package com.judian.goule.store.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.judian.goule.store.db.NewsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_BEAN".
*/
public class NewsBeanDao extends AbstractDao<NewsBean, Long> {

    public static final String TABLENAME = "NEWS_BEAN";

    /**
     * Properties of entity NewsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identity = new Property(1, long.class, "identity", false, "IDENTITY");
        public final static Property Info = new Property(2, String.class, "info", false, "info");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "user_id");
        public final static Property Title = new Property(4, String.class, "title", false, "title");
        public final static Property Type = new Property(5, String.class, "type", false, "type");
        public final static Property Look = new Property(6, String.class, "look", false, "look");
        public final static Property Context = new Property(7, String.class, "context", false, "CONTEXT");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Age = new Property(9, int.class, "age", false, "AGE");
        public final static Property Hobby = new Property(10, String.class, "hobby", false, "HOBBY");
    }


    public NewsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NewsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDENTITY\" INTEGER NOT NULL ," + // 1: identity
                "\"info\" TEXT," + // 2: info
                "\"user_id\" TEXT," + // 3: user_id
                "\"title\" TEXT," + // 4: title
                "\"type\" TEXT," + // 5: type
                "\"look\" TEXT," + // 6: look
                "\"CONTEXT\" TEXT," + // 7: context
                "\"NAME\" TEXT," + // 8: name
                "\"AGE\" INTEGER NOT NULL ," + // 9: age
                "\"HOBBY\" TEXT);"); // 10: hobby
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdentity());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(3, info);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String look = entity.getLook();
        if (look != null) {
            stmt.bindString(7, look);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(8, context);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
        stmt.bindLong(10, entity.getAge());
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(11, hobby);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdentity());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(3, info);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        String look = entity.getLook();
        if (look != null) {
            stmt.bindString(7, look);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(8, context);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
        stmt.bindLong(10, entity.getAge());
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(11, hobby);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NewsBean readEntity(Cursor cursor, int offset) {
        NewsBean entity = new NewsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // identity
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // info
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // look
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // context
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.getInt(offset + 9), // age
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // hobby
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentity(cursor.getLong(offset + 1));
        entity.setInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLook(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContext(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAge(cursor.getInt(offset + 9));
        entity.setHobby(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
